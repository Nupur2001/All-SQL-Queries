
CREATE DATABASE employees;

-- Use this database to perform the database operations.
USE employees;

-- Creating Table
CREATE TABLE empData(
-- columnName datatype, 
employeesID INT,
firstName varchar(50),
lastName varchar(50),
hourlyPay decimal(5,2),
hireDate Date
);

-- Rename Table 
Rename Table empData to empRecord;
Rename Table empRecord to empData;

-- Select is used to select data from a database
select * from empData;

-- Add new column
Alter Table empData
Add phoneNumber varchar(15);

Alter Table empData
Add empID int;

-- Select is used to select data from a database
select * from empData;

-- Rename column name
Alter Table empData
Rename Column phoneNumber to email;

-- Change Datatype
Alter table empData
Modify column email varchar(100);

-- Select is used to select data from a database
Select * from empData;

-- To move columns around
Alter Table empData
Modify email varchar(100)
After lastName;

-- Select is used to select data from a database
Select * from empData;

-- To move a column at first
Alter Table empData
Modify email varchar(100)
first;

-- Select is used to select data from a database
Select * from empData;

-- To delete a column
Alter Table empData
Drop Column email;

Alter Table empData
drop column empID;

-- Select is used to select data from a database
Select * from empData;

-- Insert Values
Insert Into empData 
values(
1, "Eugene","Krabs","100.20","2001-01-20"
);

-- Insert Multiple Values
Insert Into empData
values
	(2,"Spongebox","Squarepants",70.22,"2001-03-10"),
	(3,"Sqidward","Tentacles",80.30,"2001-03-01"),
	(2,"Spongebox","Squarepants",70.22,"2001-03-10"),
	(2,"Patrick","Star",69.22,"2001-03-30");

-- Delete Values
Truncate Table empData;

-- Insert Multiple Values
Insert Into empData
values
	(1, "Eugene","Krabs","100.20","2001-01-20"),
	(2,"Spongebox","Squarepants",70.22,"2001-03-10"),
	(3,"Sqidward","Tentacles",80.30,"2001-03-01"),
	(4,"Sandy","Astronaut",70.22,"2001-03-10"),
	(5,"Patrick","Star",69.22,"2001-03-30");
    
-- Insert value to specific records
Insert Into empData (employeesID,firstName,lastName)
Values 
(6, "Sheldon","Plankton");

-- Select specific records from the table
select firstName,lastName from empData;

-- Where clause is used to filter records. It is used to extract only those records that fulfill a specified condition.
select * from empData where employeesID=1;
select * from empData where firstName="Sandy";
select * from empData where hourlyPay> 70;
select * from empData where hourlyPay> 70.55;
select * from empData where hireDate< "2001-03-30";

-- Comparison Operator
-- SQL Not Equal comparison operator (!=)
select * from empData where employeesID!=1;
select * from empData where employeesID>1;
select * from empData where employeesID=1;
select * from empData where employeesID>2;

-- To find which record is having null value
-- Don't use =NULL...use IS NULL
select * from 
empData 
where hourlyPay Is Null;


USE employees;
-- To update values/ multiple values
update empData
set hourlyPay =10.99,
hireDate="2001-01-20"
where employeesID="6";

-- Encountered this error -> Error Code: 1175. You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column.  To disable safe mode, toggle the option in Preferences -> SQL Editor and reconnect.
set SQL_SAFE_UPDATES=0;

-- If want to update any value to NULL
update empData
set hireDate= NULL
where lastName="Plankton";

select * from empData;

-- To update all of the rows within a column
update empData
set hourlyPay= 10.55;

-- Delete a row from table
delete from empData
where lastName="Plankton";

-- Autocommit, commit, and rollback are used in databases to manage transactions. 
/*
Autocommit 
The default mode for new connections
Automatically executes a COMMIT statement after each statement sent to the database server

Commit 
Makes changes made in the current transaction permanent and visible to other sessions
Releases all InnoDB locks set during the current transaction

Rollback 
Cancels all modifications made by the current transaction
Releases all InnoDB locks set during the current transaction
*/

delete from empData;
-- Inserted values again
 
set autocommit=off;
-- Will save the last change 
commit;
delete from empData;
rollback;

select * from empData;

-- Current Date & Time
create table test(
myDate Date,
myTime Time,
myDateTime datetime
);

Insert Into test
values(
current_date(),
current_time(),
now()
);

select * from test;

Insert Into test
values(
current_date()-1,
null,
null
);

drop table test;

Insert Into test
values(
current_date()+1,
null,
null
);

create table products(
productID int,
-- The UNIQUE statement eliminates the possibility of duplicate records in a specific column.
productName varchar(50) unique,
productPrice decimal(5,2)
);

-- If forget to add UNIQUE constraint 
alter table products 
add constraint
unique(productID);

-- Inserting Values to products table
insert into products 
values
(1,"Coat",100.2),
(2,"T-shirt",30.22),
(3,"Korean Pant",30.75);


create table test(
productID int,
productName varchar(50) unique,
-- constraint enforces a column to NOT accept NULL values.
productPrice decimal(5,2) not null
);

-- If forget to add NOT NULL constraint 
alter table test
modify productID int not null;

select * from test;

insert into test 
values( null,"Mexican Pan", null);

-- Check Constraint
create table checkTest(
employeesID INT,
firstName varchar(50),
lastName varchar(50),
hourlyPay decimal(5,2),
constraint hourlyPayCheck Check(hourlyPay>=10.00),
hireDate Date
);

-- If forget to add check constraint
alter table empData
add constraint hourlyPayCheck Check(hourlyPay>=10.00);

Insert Into empData (employeesID,firstName,lastName,hourlyPay,hireDate)
Values 
(6, "Sheldon","Plankton",5.00,"2001-03-10");

-- Dropping check constraint
alter table empData
drop check hourlyPayCheck;

create table testDefault(
pID int,
pName varchar(50),
pPrice decimal(4,2) default 0
);

-- To add constraint to the table after created
alter table testDefault
alter price set default 0;

insert into testDefault 
values
(1,"Coat",16.2),
(2,"T-shirt",30.22),
(3,"Korean Pant",30.75);

insert into testDefault (pID,pName)
values
(4,"Jacket"),
(5,"Shirt"),
(6,"Japenese Pant");

select * from testDefault;

-- PRIMARY KEY -> unique + null. 
-- can only be used only once
create table transaction(
tID int primary key,
tAmount decimal(5,2)
);

-- alternative method to add constraint -> Primary Key
alter table transaction
add constraint
primary key(tID);


insert into transaction values(1001,5.55);


drop table transaction;


create table transaction(
tID int primary key AUTO_INCREMENT,
tAmount decimal(5,2)
);

insert into transaction(tAmount) values(5.99);
select * from transaction;


-- Will start from 1000
alter table transaction
AUTO_INCREMENT=1000;
-- Insert Values 

create table customers(
cID int primary key auto_increment,
customerFirstName varchar(50),
customerLastName varchar(50)
);
select * from customers;

insert into customers(customerFirstName,customerLastName)
values
("Larry","Fish"),
("Sandy","Monkey"),
("Patrick","Starfish");

-- Foreign Key constraint is used to prevent actions that would destroy links between tables
-- A FOREIGN KEY is a field (or collection of fields) in one table, that refers to the PRIMARY KEY in another table.The table with the foreign key is called the child table, and the table with the primary key is called the referenced or parent table.
create table transactions(
tID int primary key auto_increment,
tAmount decimal(5,2),
cID int,
foreign key (cID)REFERENCES customers(cID)
);
alter table transactions
auto_increment=1000;

insert into transactions(tAmount,cID)
values
(4.55,3),
(7.23,2),
(7.23,1),
(1.25,3);

select * from transactions;

delete from customers 
where cID=3;

insert into transactions(tAmount,cID)
values
(1.00,NULL);

insert into customers(customerFirstName,customerLastName)
values
("Poppy","Puff");

-- JOINS -> used to combine rows from two or more tables
select * from transactions inner join customers
on transactions.cID = customers.cID;

-- The INNER JOIN keyword selects records that have matching values in both tables.
select tID,customerFirstName,customerLastName,tAmount from transactions inner join customers
on transactions.cID=customers.cID;

-- The LEFT JOIN keyword returns all records from the left table (table1), and the matching records from the right table (table2). The result is 0 records from the right side, if there is no match.
select * from transactions left join customers on transactions.cID=customers.cID;

-- The RIGHT JOIN keyword returns all records from the right table (table2), and the matching records from the left table (table1). The result is 0 records from the left side, if there is no match.
select * from transactions right join customers on transactions.cID=customers.cID;

-- Functions -> built-in programs that are used to perform different operations on the database.

select count(tAmount) as countAmount from transactions;

select concat(customerFirstName," ",customerLastName) as fullName from customers;

create table empRecords(
eID int primary key auto_increment,
eName varchar(50),
hourlyPay decimal(5,2),
hireDate date);

insert into empRecords(eName,hourlyPay,hireDate) values
("Eugene Krab",33.55,"2025-01-15"),
("Squidbud Tentacles",31.50,"2025-01-16"),
("Spongebox Squarepants",30.55,"2025-01-16"),
("Patrick Starfish",29.55,"2025-01-18"),
("Sandy Monkey",30.55,"2025-01-15"),
("Plankton",null,null);

alter table empRecords
add column jobs varchar(50) after eName;

select * from empRecords;

update  empRecords
set jobs="Janitor" 
where eID=6;


select * from empRecords where hourlyPay="null";

select * from empRecords where hireDate<"2025-01-18" AND jobs="Cook";

select * from empRecords where jobs="Cook" OR jobs="Janitor";

select * from empRecords where not jobs="Manager";

select * from empRecords where not jobs="Manager" AND not jobs="Janitor";

select * from empRecords where hireDate BETWEEN "2025-01-15" AND "2025-01-18";

select * from empRecords where jobs in('Cook','Manager','Janitor');

-- Wild Cards -> A wildcard character is used to substitute one or more characters in a string. Wildcard characters are used with the LIKE operator. The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

-- To get data whose name starts with 's'
select * from empRecords where eName like '%ts';
select * from empRecords where eName like 's%';
select * from empRecords where eName like 'sp%';
-- To get data whose job is having '%nag%' pattern
select* from empRecords where jobs like '%nag%';
select * from empRecords where hireDate like '2025%';
-- The _ wildcard represents a single character.
select * from empRecords where jobs like '_ook';

select * from empRecords where jobs like '__ok';
select * from empRecords where hireDate like '____-__-18';


-- Combining both wildscores
select * from empRecords where jobs like '_a%';


-- order by
select * from empRecords order by hireDate;
select * from empRecords order by hireDate desc;


select * from transactions order by tAmount desc;

select * from transactions order by tAmount desc ,cID asc;

select * from empRecords limit 1;
select * from empRecords limit 1,1;

select * from empRecords order by jobs desc limit 1;

-- UNION -> COMBINES TWO OR MORE SELECT STATEMENTS
create table employee(
eID int primary key auto_increment,
eFirstName varchar(50),
eLastName varchar(50),
salary decimal(3,2),
hireDate date
);

insert into employee(eFirstName,eLastName,salary,hireDate) 
values
("Squidbud","Tentacles",5.22,"2025-01-15"),
("Spongebox","Squarepants",4.35,"2025-01-17"),
("Patrick","Strafish",4.5,"2025-01-18");

create table customerVisited(
cID int primary key auto_increment,
cFirstName varchar(50),
cLastName varchar(50),
productsTried varchar(50)
);

insert into customerVisited(cFirstName,cLastName,productsTried) 
values
("Poppy","Puff","Krabby Patty Burger"),
("Sandy","Monkey","French Fries"),
("Boofy","Fish","Krabby Patty Burger,French Fries");


insert into customerVisited(cFirstName,cLastName,productsTried) 
values("Larry","Lobster","Spider Patty Burger");
select eFirstName,eLastName from employee
union
select cFirstName,cLastName from customerVisited;


-- SELF JOINS
alter table customerVisited
add referalId int;
select * from customerVisited;


update customerVisited
set referalId=2
where cID=1;


select * from customerVisited as a 
inner join customers as b
on a.referalId=b.cID;

select 
a.cFirstName,a.cLastName,
b.customerFirstName,b.customerLastName
from customerVisited as a  
inner join customers as b 
on a.referalId=b.cID;


select 
a.cFirstName,a.cLastName,
concat(b.customerFirstName,b.customerLastName) as referredBy
from customerVisited as a  
right join customers as b 
on a.referalId=b.cID;

select * from  empRecords;

alter table empRecords
add supervisorID int;

update empRecords
set supervisorId=1
where eID=5;

select a.eID,a.eName, 
concat(b.eName) 
as "Report To" 
from empRecords as a 
left join empRecords as b 
on a.supervisorId=b.eID;



create table employeeAtKrustyKrab(
eId int primary key auto_increment,
eFirstName varchar(50),
eLastName varchar(50),
job varchar(50),
salary int,
hireDate date
);

insert into employeeAtKrustyKrab(eFirstName,eLastName,job,salary,hireDate)
values
("Eugene","Krab","Owner",10000,"2025-01-15"),
("Squidbud","Tentacles","Maneger",7000,"2025-01-16"),
("Spongebox","Squarepants","Cook",6000,"2025-01-16"),
("Patrick","Starfish","Cook",6000,"2025-01-18"),
("Sandy","Monkey","Asst. Manegar",8500,"2025-01-15");

-- Views

create view employeeAttendance 
as select eFirstName,eLastName 
from  employeeAtKrustyKrab;

select * from employeeAttendance;


-- INDEXES
create index lastNameAndFirstName on employeeAtKrustyKrab(eLastName,eFirstName);
show indexes from employeeAtKrustyKrab;


select * from employeeAtKrustyKrab  where eLastName="Monkey" And eFirstName="Sandy";
select * from employeeAtKrustyKrab where eFirstName="Sandy";
select * from employeeAtKrustyKrab where eLastName="Monkey";


-- SUBQUERIES
select eFirstName,eLastName,salary,(select avg(salary)
from employeeAtKrustyKrab) 
as avgEmpSalaryData 
from employeeAtKrustyKrab;

select eFirstName,eLastName,salary from employeeAtKrustyKrab
where salary>(select avg(salary)
from employeeAtKrustyKrab);

-- To remove duplicates we use DISINCT
select eID,eName,jobs,hourlyPay,hireDate 
from empRecords 
where eID in 
(select distinct eID 
from empRecords 
where hourlyPay is not null);

/*
create table customerVisited(
cID int primary key auto_increment,
cFirstName varchar(50),
cLastName varchar(50),
productsTried varchar(50)
);
*/
alter table customerVisited
add orderDate date,
add totalAmount int;


select * from customerVisited;
update customerVisited
set orderDate="2025-01-17" 
where cFirstName="Larry";

update customerVisited
set totalAmount=700
where cFirstName="Larry";

-- Group By
select sum(totalAmount),orderDate 
from customerVisited
group by orderDate;


insert into customerVisited(cFirstName,cLastName,productsTried,orderDate,totalAmount) 
values
("Poppy","Puff","Spider Patty Burger","2025-01-19",700),
("Sandy","Monkey","Krabby Patty Burger","2025-01-18",1000),
("Bluffy","Bass","Krabby Patty Burger,French Fries,Coldrink","2025-01-19",700),
("Larry","Lobster","Krabby Patty Burger","2025-01-20",1000);


select count(cFirstName),orderDate as customerVisitedCount from customerVisited group by orderDate;
select count(orderDate) as DOO,cFirstName as customerVisitedNames from customerVisited group by cFirstName;
select count(orderDate) as DOO,cFirstName as customerVisitedNames from customerVisited group by cFirstName having count(orderDate)>1;
-- ROLLUP
select sum(totalAmount), orderDate from customerVisited group by orderDate with rollup;
select count(productsTried), orderDate, cFirstName from customerVisited group by orderDate,cFirstName with rollup;
set sql_safe_updates=0


