create database chatApp;
use chatApp;
set sql_safe_updates=0;

-- SHOW TABLES;
-- SELECT FOUND_ROWS();

create table users(
userID int primary key auto_increment,
userFullName varchar(50) not null,
userName varchar(50) not null,
userPhoneNo varchar(20) not null,
userEmail varchar(100) not null,
userProfilePic varchar(255) not null,
userAccountCreatedAt datetime not null,
userNotification enum('mute','unmute') default 'unmute' not null
); 

insert into users(userFullName,userName,userPhoneNo,userEmail,userProfilePic,userAccountCreatedAt,userNotification)
values
("Kylie Martinez","KylieM","78790874436","kylieM@example.com","https://www.dummylink.com/task1",now(),"unmute"),
("Alexander Sloan","Alex","97874780466","alexSloan@example.com","https://www.dummylink.com/task2","2025-03-18 12:32:43","mute"),
("Selene Osborne","SeleneSlay","6546622887","seleneOsborne@example.com","https://www.dummylink.com/task3",now(),"mute"),
("Augustus Solis","Aggy","79870855736","aggy@example.com","https://www.dummylink.com/task4",now(),"unmute"),
("Miracle Bradshaw","MiracleInYourLife","6578182596","miracleB@example.com","https://www.dummylink.com/task5","2024-09-15 13:45:34","unmute");

alter table users
drop column userNotification;

alter table users
add column isUnMuted bool default true not null ;

update users
set isUnMuted=FALSE
where userID=3;

alter table users
add column userStatus varchar(20);

update users
set userStatus="ONLINE"
where userID=5;

create table chats(
chatID int primary key auto_increment,
chatType enum('Group','Individual') not null,
chatCreatedAt datetime not null
);

insert into chats(chatType,chatCreatedAt)
value
("Individual","2025-02-01 9:06:23"),
("Group",now()),
("Individual",now()),
("Group","2025-02-01 9:06:23"),
("Individual","2025-07-12 6:06:29");

create table chatMemberTables(
userID int,
chatID int,
isUnMuted bool default true not null,
foreign key (chatID) references chats(chatID),
foreign key (userID) references users(userID)
);

insert into chatMemberTables(userID,chatID,isUnMuted)
values
(1,4,true),
(2,4,false),
(3,4,false),
(5,4,true),
(4,4,true);

create table messages(
messageID int primary key auto_increment,
chatID int,
senderID int,
parentMessageID int,
messagesCreatedAt datetime not null default current_timestamp,
messageBody varchar(255) not null,
messagesDeletedAt datetime  null,
foreign key (chatID) references chats(chatID)
);

alter table messages
drop column parentMessageID;

alter table messages
add column parentMessageID int null after senderID;
alter table messages
add foreign key(parentMessageID) references messages(messageID);

alter table messages
add foreign key (senderID) references users(userID);

insert into messages(chatID,senderID,parentMessageID,messagesCreatedAt,messageBody)
values
(4,1,null,now(),"Media"),
(4,2,null,"2025-03-17 10:12:56","Media"),
(4,3,null,"2025-03-15 13:00:00","Media");

update messages
set parentMessageID=5
where chatID=3;

select * from messages;

create table groupChats(
groupID int primary key auto_increment,
groupCreatedAt datetime not null default current_timestamp,
groupName varchar(50),
groupAdmin int,
chatID int,
foreign key (groupAdmin) references users(userID),
foreign key (chatID) references chats(chatID)
);

insert into groupChats(groupCreatedAt,groupName,groupAdmin,chatID)
values
(now(),"Hello Framds",1,4);


create table permission(
userRole varchar(50) default "Moderator",
groupAdmin int,
groupID int,
capibilities enum("AddingUser","RemovingUser","MsgEditing","SendingMedia"),
foreign key (groupAdmin) references users(userID),
foreign key (groupID) references groupChats(groupID)
);


insert into permission (groupAdmin,groupID,capibilities)
values
(4,1,"AddingUser"),
(5,2,"RemovingUser");


create table readReceipts(
messageReadAt datetime not null default current_timestamp,
recieverID int,
messageID int,
foreign key (recieverID) references users(userID),
foreign key (messageID) references messages(messageID)
);

insert into readReceipts(messageReadAt,recieverID,messageID)
value
(now(),1,2);


create table reactions(
reactions enum("Thumbsup","ThumbsDown","Happy","Excited","Sad","Crying","Angry","Ewww"),
userID int,
messageID int,
foreign key (userID) references users(userID),
foreign key (messageID) references messages(messageID)
);

insert into reactions(reactions,userID,messageID)
value
("Excited",2,2);


select * from users;
select * from chats;
select * from messages;
select * from chatMemberTables;
select * from groupChats;
select * from permission;
select * from readReceipts;
select * from reactions;


-- Questions
-- List all chats (individual and group) a user is part of, showing the user’s role, chat type, and whether notifications are muted.
select  users.userID,chats.chatID,users.userFullName,chatMemberTables.isUnMuted,chats.chatType,permission.groupAdmin,permission.userRole
from chatMemberTables join users on chatMemberTables.userID=users.userID
join chats on chats.chatID=chatMemberTables.chatID
join permission on permission.groupAdmin=users.userID;

-- Retrieve the last 50 messages in a chat, including the sender's name, timestamp, and reactions. Sort them by sent_at.
select messages.messageID, users.userFullName,messages.messagesCreatedAt,messages.messageBody,reactions.reactions
from messages 
join users on users.userID=messages.senderID
left join reactions on reactions.userID=users.userID
order by messages.messagesCreatedAt
limit 50;

-- Fetch all unread messages for a user in group chats where the user is a member.
select distinct messages.messageID,messages.senderID,messages.messageBody,users.userFullName
from messages
join chatMemberTables on chatMemberTables.userID=messages.senderID
join readReceipts on chatMemberTables.userID=readReceipts.recieverID
join users on readReceipts.recieverID=users.userID
where users.userID=1
and messages.messageID 
not in (select readReceipts.messageID from readReceipts where readReceipts.recieverID=users.userID);

-- Get a list of group members in a specific group, showing their role and online/offline status.
select chatMemberTables.chatID,chatMemberTables.userID,users.userFullName,users.userStatus,permission.userRole
from chatMemberTables
join users on users.userID=chatMemberTables.userID
join chats on chatMemberTables.chatID=chats.chatID
left join permission on permission.groupAdmin=users.userID
where chatMemberTables.chatID=4;

-- List the most reacted messages in the application, grouped by reaction type.
select messages.messageID,messages.messageBody,count(reactions.reactions) as totalReactions
from messages 
join reactions on messages.messageID=reactions.messageID
group by messages.messageID, messages.messageBody;

-- Fetch the total number of media messages sent in a specific group chat over the last 7 days.
select messages.messagesCreatedAt, messages.messageBody from 
messages where 
 DATE(messagesCreatedAt)>=Date(now())-interval 7 day and messages.messageBody like "%Media";

-- Find all users who have muted a specific group chat.
select users.userFullName,chatMemberTables.isUnMuted
from chatMemberTables
join groupChats on chatMemberTables.chatID=groupChats.chatID
join users on users.userID=chatMemberTables.userID
where groupChats.groupName="Hello Framds";

-- Retrieve a user’s last read message in each of their chats.
select distinct messages.messageID, messages.messageBody 
from readReceipts
join messages on readReceipts.messageID=messages.messageID
where readReceipts.messageID=3;

select * from readReceipts;
-- Fetch all messages in a chat containing a specific keyword, sorted by the number of reactions.
select distinct messages.messageID,messages.messageBody,count(reactions.reactions) as numberOfReactions
from messages join reactions on messages.messageID=reactions.messageID
where messages.messageBody like "%completed%"
group by messages.messageID;

-- List all group chats where the user is an admin and has added at least 5 new members in the last 30 days.
