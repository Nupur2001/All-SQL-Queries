set sql_safe_updates=0;
create database ECommerce;
use ECommerce;

CREATE TABLE customers (
    customerID INT PRIMARY KEY AUTO_INCREMENT,
    customerName VARCHAR(50) NOT NULL,
    customerEmail VARCHAR(100) UNIQUE NOT NULL,
    customerPhoneNo VARCHAR(20) NOT NULL,
    customerAddress VARCHAR(100) NOT NULL,
    customerAccountCreatedAt DATETIME NOT NULL
);

insert into customers(customerName,customerEmail,customerPhoneNo,customerAddress,customerAccountCreatedAt)
value
("Amirah George","amirahGeorge@example.com","78790874436","20A JBL Street","2025-08-01 12:34:22");
-- "2024-08-01 12:09:57"
-- update customers set customerPhoneNo="7879087443" where customerID=7;

CREATE TABLE products (
    productID INT PRIMARY KEY AUTO_INCREMENT,
    productName VARCHAR(50) NOT NULL,
    productPrice DECIMAL(10 , 2 ) NOT NULL,
    productStockQuantity INT NOT NULL
);

insert into products(productName,productPrice,productStockQuantity)
value
("A4 Size Regsiter",60,0);

UPDATE products 
SET 
    productStockQuantity = 10
WHERE
    productID = 3;

CREATE TABLE categories (
    categoryID INT PRIMARY KEY AUTO_INCREMENT,
    categoryName VARCHAR(50) NOT NULL
);


insert into categories(categoryName)
value
("Stationary");

CREATE TABLE orders (
    orderID INT PRIMARY KEY AUTO_INCREMENT,
    customerID INT,
    orderDate DATETIME NOT NULL,
    orderStatus ENUM('Pending', 'Delivered', 'Placed') NOT NULL,
    totalAmount DECIMAL(10 , 2 ) NOT NULL,
    FOREIGN KEY (customerID)
        REFERENCES customers (customerID)
);

insert into orders(customerID,orderDate,orderStatus,totalAmount)
value
(5,"2025-01-01 12:43:12","Placed",40000.65);

CREATE TABLE orderItems (
    orderItemsID INT PRIMARY KEY AUTO_INCREMENT,
    orderID INT,
    productID INT,
    orderItemQuantity INT NOT NULL,
    unitPrice DECIMAL(10 , 2 ),
    FOREIGN KEY (orderID)
        REFERENCES orders (orderID),
    FOREIGN KEY (productID)
        REFERENCES products (productID)
);

alter table orderItems
add column totalAmount decimal(10,2);

UPDATE orderItems 
SET 
    totalAmount = unitPrice * orderItemQuantity
WHERE
    orderItemsID = 3;

CREATE 
    TRIGGER  totalAmountUpdate
 BEFORE UPDATE ON orderItems FOR EACH ROW 
    SET new . totalAmount = (new.unitPrice * new.orderItemQuantity);
    
CREATE 
    TRIGGER  totalAmountOnInsert
 BEFORE INSERT ON orderItems FOR EACH ROW 
    SET new . totalAmount = (new.unitPrice * new.orderItemQuantity);



insert into orderItems(orderID,productID,orderItemQuantity,unitPrice)
value
(5,6,1,40000.65);

CREATE TABLE productCategories (
    productID INT,
    categoryID INT,
    FOREIGN KEY (productID)
        REFERENCES products (productID),
    FOREIGN KEY (categoryID)
        REFERENCES categories (categoryID)
);

insert into productCategories(productID,categoryID)
value
(12,3);

SELECT * FROM customers;
SELECT * FROM products;
SELECT * FROM categories;
SELECT * FROM orders;
SELECT * FROM orderItems;
SELECT * FROM productCategories;


-- Ouestions
-- List all customers who placed at least one order in the last 30 days.
SELECT 
    *
FROM
    orders
WHERE
    DATE(orderDate) >= DATE(NOW()) - INTERVAL 30 DAY
        AND orderStatus = 'Placed';

-- Retrieve all products under a speciﬁc category (e.g., "Electronics").
SELECT 
    products.productID,
    products.productName,
    products.productPrice
FROM
    products
        INNER JOIN
    productCategories ON productCategories.productID = products.productID
        INNER JOIN
    categories ON productCategories.categoryID = categories.categoryID
WHERE
    categories.categoryName = 'Electronics';

-- Fetch the details of an order by its order_id, including the customer’s name, products ordered, their quantities, and the total order amount.
SELECT 
    products.productID,
    products.productName,
    products.productPrice,
    customers.customerID,
    orders.orderID,
    customers.customerName,
    orders.orderDate,
    orders.orderStatus,
    orderItems.orderItemQuantity
FROM
    customers
        INNER JOIN
    orders ON orders.customerID = customers.customerID
        INNER JOIN
    orderItems ON orderItems.orderID = orders.orderID
        INNER JOIN
    products ON products.productID = orderItems.productID;




-- List all products that are out of stock.
select * from products where productStockQuantity=0;

-- Show the total revenue generated by the store.
select sum(totalAmount) as revenueGenerated from orderItems;

-- Retrieve all orders placed by a speciﬁc customer along with their order details
select 
orders.orderID,
customers.customerID,
customers.customerName,
orders.orderDate,
orders.orderStatus
from orderItems inner join 
orders on orderItems.orderID=orders.orderID
inner join customers on orders.customerID=customers.customerID
where orders.orderID=4;


-- Find the top 5 best-selling products based on quantity sold.
select orderItemQuantity,products.productName
from orderItems inner join products
on orderItems.productID=products.productID
group by orderItemsID having count(orderItemQuantity) order by max(orderItemQuantity) desc;

-- Display categories along with the total number of products in each category.
select products.productID,categories.categoryID,categories.categoryName,products.productName,count(productCategories.productID)
from products inner join productCategories on productCategories.productID=products.productID
inner join categories on productCategories.categoryID = categories.categoryID
group by categories.categoryName having count(productCategories.categoryID);
